name: package:coverage
permissions: read-all

on:
  # Run on PRs and pushes to the default branch.
  push:
    branches: [main]
    paths:
      - ".github/workflows/coverage.yaml"
      - "**"
  pull_request:
    branches: [main]
    paths:
      - ".github/workflows/coverage.yaml"
      - "**"
  # schedule:
  #   - cron: "0 0 * * 0"

jobs:
  # Check code formatting and static analysis on a single OS (linux)
  # against Dart stable.
  analyze:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .
    strategy:
      fail-fast: false
      matrix:
        sdk: [stable]
    steps:
      - uses: actions/checkout@v4
      - uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ matrix.sdk }}
      - id: install
        name: Install dependencies
        run: dart pub get
      - name: Check formatting
        run: dart format --output=none --set-exit-if-changed .
        if: always() && steps.install.outcome == 'success'
      - name: Analyze code
        run: dart analyze --fatal-infos
        if: always() && steps.install.outcome == 'success'

  # Run tests on a matrix consisting of two dimensions:
  # 1. OS: ubuntu-latest
  # 2. release channel: 3.7, stable
  test:
    needs: analyze
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: .
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest]
        sdk: [3.7, stable]
    steps:
      - uses: actions/checkout@v4
      - uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ matrix.sdk }}
      - id: install
        name: Install dependencies
        run: dart pub get
      - name: Run tests
        run: dart test
        if: always() && steps.install.outcome == 'success'

  coverage:
    needs: test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .
    steps:
      - uses: actions/checkout@v4
      - uses: dart-lang/setup-dart@v1
        with:
          sdk: stable
      - id: install
        name: Install dependencies
        run: dart pub get
      - name: Collect and report coverage
        run: make coverage
      - name: Upload coverage
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: coverage/lcov.info
